'use babel';

var fs = require('fs-plus');
var git = require('../git');
var notifier = require('../notifier');
var BranchListView = require('../views/branch-list-view');

module.exports = function (repo) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? { remote: false } : arguments[1];

  var args = options.remote ? ['branch', '-r', '--no-color'] : ['branch', '--no-color'];
  return git.cmd(args, { cwd: repo.getWorkingDirectory() }).then(function (data) {
    return new BranchListView(data, function (_ref) {
      var name = _ref.name;

      var branch = name;
      git.cmd(['checkout'].concat(branch), { cwd: repo.getWorkingDirectory() }).then(function (message) {
        notifier.addSuccess(message);
        atom.workspace.getTextEditors().forEach(function (editor) {
          try {
            var path = editor.getPath();
            console.log('Git-plus: editor.getPath() returned \'' + path + '\'');
            if (path && path.toString) {
              fs.exists(path.toString(), function (exists) {
                if (!exists) editor.destroy();
              });
            }
          } catch (error) {
            notifier.addWarning("There was an error closing windows for non-existing files after the checkout. Please check the dev console.");
            console.info("Git-plus: please take a screenshot of what has been printed in the console and add it to the issue on github at https://github.com/akonwi/git-plus/issues/139", error);
          }
        });
        git.refresh(repo);
      })['catch'](notifier.addError);
    });
  });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2phcmVkLy5hdG9tL3BhY2thZ2VzL2dpdC1wbHVzL2xpYi9tb2RlbHMvZ2l0LWNoZWNrb3V0LWJyYW5jaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUE7O0FBRVgsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQzdCLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUM3QixJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDdkMsSUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUE7O0FBRTNELE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBQyxJQUFJLEVBQThCO01BQTVCLE9BQU8seURBQUMsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDOztBQUM3QyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQTtBQUN2RixTQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFDLENBQUMsQ0FDdEQsSUFBSSxDQUFDLFVBQUEsSUFBSSxFQUFJO0FBQ1osV0FBTyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBQyxJQUFNLEVBQUs7VUFBVixJQUFJLEdBQUwsSUFBTSxDQUFMLElBQUk7O0FBQ3BDLFVBQU0sTUFBTSxHQUFHLElBQUksQ0FBQTtBQUNuQixTQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFDLENBQUMsQ0FDdEUsSUFBSSxDQUFDLFVBQUEsT0FBTyxFQUFJO0FBQ2YsZ0JBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDNUIsWUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNLEVBQUk7QUFDaEQsY0FBSTtBQUNGLGdCQUFNLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7QUFDN0IsbUJBQU8sQ0FBQyxHQUFHLDRDQUF5QyxJQUFJLFFBQUksQ0FBQTtBQUM1RCxnQkFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUN6QixnQkFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsVUFBQSxNQUFNLEVBQUk7QUFBQyxvQkFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7ZUFBQyxDQUFDLENBQUE7YUFDdEU7V0FDRixDQUNELE9BQU8sS0FBSyxFQUFFO0FBQ1osb0JBQVEsQ0FBQyxVQUFVLENBQUMsNkdBQTZHLENBQUMsQ0FBQTtBQUNsSSxtQkFBTyxDQUFDLElBQUksQ0FBQywrSkFBK0osRUFBRSxLQUFLLENBQUMsQ0FBQTtXQUNyTDtTQUNGLENBQUMsQ0FBQTtBQUNGLFdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7T0FDbEIsQ0FBQyxTQUNJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0tBQzFCLENBQUMsQ0FBQTtHQUNILENBQUMsQ0FBQTtDQUNILENBQUEiLCJmaWxlIjoiL2hvbWUvamFyZWQvLmF0b20vcGFja2FnZXMvZ2l0LXBsdXMvbGliL21vZGVscy9naXQtY2hlY2tvdXQtYnJhbmNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCdcblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcy1wbHVzJylcbmNvbnN0IGdpdCA9IHJlcXVpcmUoJy4uL2dpdCcpXG5jb25zdCBub3RpZmllciA9IHJlcXVpcmUoJy4uL25vdGlmaWVyJylcbmNvbnN0IEJyYW5jaExpc3RWaWV3ID0gcmVxdWlyZSgnLi4vdmlld3MvYnJhbmNoLWxpc3QtdmlldycpXG5cbm1vZHVsZS5leHBvcnRzID0gKHJlcG8sIG9wdGlvbnM9e3JlbW90ZTogZmFsc2V9KSA9PiB7XG4gIGNvbnN0IGFyZ3MgPSBvcHRpb25zLnJlbW90ZSA/IFsnYnJhbmNoJywgJy1yJywgJy0tbm8tY29sb3InXSA6IFsnYnJhbmNoJywgJy0tbm8tY29sb3InXVxuICByZXR1cm4gZ2l0LmNtZChhcmdzLCB7Y3dkOiByZXBvLmdldFdvcmtpbmdEaXJlY3RvcnkoKX0pXG4gIC50aGVuKGRhdGEgPT4ge1xuICAgIHJldHVybiBuZXcgQnJhbmNoTGlzdFZpZXcoZGF0YSwgKHtuYW1lfSkgPT4ge1xuICAgICAgY29uc3QgYnJhbmNoID0gbmFtZVxuICAgICAgZ2l0LmNtZChbJ2NoZWNrb3V0J10uY29uY2F0KGJyYW5jaCksIHtjd2Q6IHJlcG8uZ2V0V29ya2luZ0RpcmVjdG9yeSgpfSlcbiAgICAgIC50aGVuKG1lc3NhZ2UgPT4ge1xuICAgICAgICBub3RpZmllci5hZGRTdWNjZXNzKG1lc3NhZ2UpXG4gICAgICAgIGF0b20ud29ya3NwYWNlLmdldFRleHRFZGl0b3JzKCkuZm9yRWFjaChlZGl0b3IgPT4ge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gZWRpdG9yLmdldFBhdGgoKVxuICAgICAgICAgICAgY29uc29sZS5sb2coYEdpdC1wbHVzOiBlZGl0b3IuZ2V0UGF0aCgpIHJldHVybmVkICcke3BhdGh9J2ApXG4gICAgICAgICAgICBpZiAocGF0aCAmJiBwYXRoLnRvU3RyaW5nKSB7XG4gICAgICAgICAgICAgIGZzLmV4aXN0cyhwYXRoLnRvU3RyaW5nKCksIGV4aXN0cyA9PiB7aWYgKCFleGlzdHMpIGVkaXRvci5kZXN0cm95KCl9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIG5vdGlmaWVyLmFkZFdhcm5pbmcoXCJUaGVyZSB3YXMgYW4gZXJyb3IgY2xvc2luZyB3aW5kb3dzIGZvciBub24tZXhpc3RpbmcgZmlsZXMgYWZ0ZXIgdGhlIGNoZWNrb3V0LiBQbGVhc2UgY2hlY2sgdGhlIGRldiBjb25zb2xlLlwiKVxuICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiR2l0LXBsdXM6IHBsZWFzZSB0YWtlIGEgc2NyZWVuc2hvdCBvZiB3aGF0IGhhcyBiZWVuIHByaW50ZWQgaW4gdGhlIGNvbnNvbGUgYW5kIGFkZCBpdCB0byB0aGUgaXNzdWUgb24gZ2l0aHViIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ha29ud2kvZ2l0LXBsdXMvaXNzdWVzLzEzOVwiLCBlcnJvcilcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGdpdC5yZWZyZXNoKHJlcG8pXG4gICAgICB9KVxuICAgICAgLmNhdGNoKG5vdGlmaWVyLmFkZEVycm9yKVxuICAgIH0pXG4gIH0pXG59XG4iXX0=