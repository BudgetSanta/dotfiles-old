#!/bin/bash
# Git Info
function parse_git_dirty_me {
    [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo -e "${LB_RED} * "
}
function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/ [\1]$(parse_git_dirty_me)/"
}

# Ranger exit into current Dir
ranger-cd() {
    tempfile=$(mktemp /tmp/${tempfoo}.XXXXXX)
    /home/linuxbrew/.linuxbrew/bin/ranger --choosedir="$tempfile" "${@:-$(pwd)}" < $TTY
    test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
        cd -- "$(cat "$tempfile")"
    fi
    rm -f -- "$tempfile"
}

# Make dir and change to it
mkcd() {
    mkdir "$1"
    cd "$1"
}

# Change Dir and list file
cdl() {
    cd "$1"
    ls
}

# LSL Func
source $HOME/.dotfiles/term/funcs/lsl

# Comp class directory
# Usage: cs CLASS_CODE [WEEK]
cs() {

    if [ -d ~/git/comp"$1" ]; then
        cd ~/git/comp"$1"/
            
        # If week/ass given
        if [ "$#" -eq "2" ]; then

            # If week given 
            if [ -d week"$2"/lab ]; then    # CDs INTO WEEK
                cd week"$2"/lab/
                lsl
            # If ass give
            elif [ "$2" = "ass" ]; then    # CDs INTO ASSIGNMENT
                case "$1" in
                    1531) 
                        cd survey-system-h17a-pissedachios
                        lsl;;
                    #CLASS_CODE)
                    #   cd ASSIGNMENT_FOLDER
                    #   lsl;;
                    *) echo "NO SELECTION IN CASE";;
                esac

            else                            # Week not found
                printf "Week \"$2\" doesn't exist.\n"
            fi

        # No week/ass given
        else
            ls
        fi
    else # Doesn't exist
        printf "Class \"$1\" doesn't exist.\n"
    fi
}



# sshfs robot@192.168.1.45:/ ~/jokers -o nonempty
# Make function that takes filename, if exists, mount, else, mkdir, mount
mounty() {
    
    # User Input
    echo -n "Enter SSH [ENTER]: "       
    read ssh                            # SSH
    echo -n "Enter DIR [ENTER]: "
    read dir                            # Directory to mount to

    # Checking for directory
    if [ ! -d "$dir" ]; then            
        echo "Created directory: $dir"
        # mkdir "$dir"                   
    fi
    echo "Maybe finish the function before running it?"
    # sshfs "$ssh"/ "$dir" -o nonempty
}

